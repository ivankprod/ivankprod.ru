name: CI
on:
  push:
    branches:
      - main
      - master

jobs:
  server:
    name: Server
    strategy:
      matrix:
        go-version: [ '1.16' ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src/server
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/checkout@v2

      - name: Go Build Cache paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('src/server/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('src/server/go.sum') }}

      - name: Change workdir
        run: cd ${{ env.working-directory }}

      # go install github.com/securego/gosec/v2/cmd/gosec@latest
      - name: Run Gosec
        env:
          GO111MODULE: on
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
          gosec -exclude=G402 -exclude-generated ./...

      - name: Go Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          args: -v
          skip-pkg-cache: true
          skip-build-cache: true
          skip-go-installation: true

      - name: Go Test
        run: sudo go test -coverprofile=coverage.out -v ./...

      - name: Push Go coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          verbose: true

  frontend:
    name: Frontend
    strategy:
      matrix:
        node-version: [ '16' ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./src/frontend
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: node-modules-${{ hashFiles('src/frontend/package-lock.json') }}

      - name: Install JS dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: JS Lint
        run: npm run lint
        working-directory: ${{ env.working-directory }}

      - name: JS Test
        run: npm run test
        working-directory: ${{ env.working-directory }}

      - name: Push JS coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ env.working-directory }}/src/scripts/coverage/
          verbose: true
